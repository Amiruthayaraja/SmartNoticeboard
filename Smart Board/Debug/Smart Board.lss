
Smart Board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000033e  000003d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010c  0080010c  000003de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000410  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c26  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000798  00000000  00000000  000010ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000050c  00000000  00000000  00001886  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00001d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000479  00000000  00000000  00001f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005db  00000000  00000000  000023ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002988  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 21 01 	call	0x242	; 0x242 <main>
  9e:	0c 94 9d 01 	jmp	0x33a	; 0x33a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initPorts>:
}


void initPorts(void)
{
	LcdDataBusDirnReg = 0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	84 b9       	out	0x04, r24	; 4
	//DDRA =0xFF;
	DDRD &= 0B11111110;
  aa:	50 98       	cbi	0x0a, 0	; 10
	DDRC |= 0B00100000;
  ac:	3d 9a       	sbi	0x07, 5	; 7
  ae:	08 95       	ret

000000b0 <Turn_Power_Indicator_LED_ON>:
	
}

void Turn_Power_Indicator_LED_ON(void)
{
	PORTB |= 0B00100000;
  b0:	2d 9a       	sbi	0x05, 5	; 5
  b2:	08 95       	ret

000000b4 <Lcd_CmdWrite>:
}

void Lcd_CmdWrite (char cmd)
{
	LcdDataBus = (cmd & 0xF0);
  b4:	98 2f       	mov	r25, r24
  b6:	90 7f       	andi	r25, 0xF0	; 240
  b8:	9b b9       	out	0x0b, r25	; 11
	LcdControlBus &=~(1<<LCD_RS); //SET RS PIN TO LOW
  ba:	28 98       	cbi	0x05, 0	; 5
	LcdControlBus &=~(1<<LCD_RW);  // SET RW PIN TO LOW
  bc:	29 98       	cbi	0x05, 1	; 5
	LcdControlBus |=(1<<LCD_EN); // GENERATE HIGH TO LOW PULSE
  be:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	ef e3       	ldi	r30, 0x3F	; 63
  c2:	fc e9       	ldi	r31, 0x9C	; 156
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <Lcd_CmdWrite+0x10>
  c8:	00 c0       	rjmp	.+0      	; 0xca <Lcd_CmdWrite+0x16>
  ca:	00 00       	nop
	_delay_ms(10);
	LcdControlBus &=~(1<<LCD_EN);
  cc:	2a 98       	cbi	0x05, 2	; 5
  ce:	ef e3       	ldi	r30, 0x3F	; 63
  d0:	fc e9       	ldi	r31, 0x9C	; 156
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <Lcd_CmdWrite+0x1e>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <Lcd_CmdWrite+0x24>
  d8:	00 00       	nop
	_delay_ms(10);
	
	
	LcdDataBus = ((cmd<<4) & 0xF0);
  da:	f0 e1       	ldi	r31, 0x10	; 16
  dc:	8f 9f       	mul	r24, r31
  de:	c0 01       	movw	r24, r0
  e0:	11 24       	eor	r1, r1
  e2:	8b b9       	out	0x0b, r24	; 11
	LcdControlBus &=~(1<<LCD_RS); //SET RS PIN TO LOW
  e4:	28 98       	cbi	0x05, 0	; 5
	LcdControlBus &=~(1<<LCD_RW);  // SET RW PIN TO LOW
  e6:	29 98       	cbi	0x05, 1	; 5
	LcdControlBus |=(1<<LCD_EN); // GENERATE HIGH TO LOW PULSE
  e8:	2a 9a       	sbi	0x05, 2	; 5
  ea:	8f e3       	ldi	r24, 0x3F	; 63
  ec:	9c e9       	ldi	r25, 0x9C	; 156
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <Lcd_CmdWrite+0x3a>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <Lcd_CmdWrite+0x40>
  f4:	00 00       	nop
	_delay_ms(10);
	LcdControlBus &=~(1<<LCD_EN);
  f6:	2a 98       	cbi	0x05, 2	; 5
  f8:	ef e3       	ldi	r30, 0x3F	; 63
  fa:	fc e9       	ldi	r31, 0x9C	; 156
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <Lcd_CmdWrite+0x48>
 100:	00 c0       	rjmp	.+0      	; 0x102 <Lcd_CmdWrite+0x4e>
 102:	00 00       	nop
 104:	08 95       	ret

00000106 <Lcd_DataWrite>:
	_delay_ms(10);
}

void Lcd_DataWrite(char dat)
{
	LcdDataBus = (dat & 0xF0);
 106:	98 2f       	mov	r25, r24
 108:	90 7f       	andi	r25, 0xF0	; 240
 10a:	9b b9       	out	0x0b, r25	; 11
	LcdControlBus |=(1<<LCD_RS); //SET RS PIN TO high
 10c:	28 9a       	sbi	0x05, 0	; 5
	LcdControlBus &=~(1<<LCD_RW);  // SET RW PIN TO LOW
 10e:	29 98       	cbi	0x05, 1	; 5
	LcdControlBus |=(1<<LCD_EN); // GENERATE HIGH TO LOW PULSE
 110:	2a 9a       	sbi	0x05, 2	; 5
 112:	ef e3       	ldi	r30, 0x3F	; 63
 114:	fc e9       	ldi	r31, 0x9C	; 156
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <Lcd_DataWrite+0x10>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <Lcd_DataWrite+0x16>
 11c:	00 00       	nop
	_delay_ms(10);
	LcdControlBus &=~(1<<LCD_EN);
 11e:	2a 98       	cbi	0x05, 2	; 5
 120:	ef e3       	ldi	r30, 0x3F	; 63
 122:	fc e9       	ldi	r31, 0x9C	; 156
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <Lcd_DataWrite+0x1e>
 128:	00 c0       	rjmp	.+0      	; 0x12a <Lcd_DataWrite+0x24>
 12a:	00 00       	nop
	_delay_ms(10);
	
	
	LcdDataBus = ((dat<<4) & 0xF0);
 12c:	f0 e1       	ldi	r31, 0x10	; 16
 12e:	8f 9f       	mul	r24, r31
 130:	c0 01       	movw	r24, r0
 132:	11 24       	eor	r1, r1
 134:	8b b9       	out	0x0b, r24	; 11
	LcdControlBus |=(1<<LCD_RS); //SET RS PIN TO high
 136:	28 9a       	sbi	0x05, 0	; 5
	LcdControlBus &=~(1<<LCD_RW);  // SET RW PIN TO LOW
 138:	29 98       	cbi	0x05, 1	; 5
	LcdControlBus |=(1<<LCD_EN); // GENERATE HIGH TO LOW PULSE
 13a:	2a 9a       	sbi	0x05, 2	; 5
 13c:	8f e3       	ldi	r24, 0x3F	; 63
 13e:	9c e9       	ldi	r25, 0x9C	; 156
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <Lcd_DataWrite+0x3a>
 144:	00 c0       	rjmp	.+0      	; 0x146 <Lcd_DataWrite+0x40>
 146:	00 00       	nop
	_delay_ms(10);
	LcdControlBus &=~(1<<LCD_EN);
 148:	2a 98       	cbi	0x05, 2	; 5
 14a:	ef e3       	ldi	r30, 0x3F	; 63
 14c:	fc e9       	ldi	r31, 0x9C	; 156
 14e:	31 97       	sbiw	r30, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <Lcd_DataWrite+0x48>
 152:	00 c0       	rjmp	.+0      	; 0x154 <Lcd_DataWrite+0x4e>
 154:	00 00       	nop
 156:	08 95       	ret

00000158 <Lcd_init>:
	_delay_ms(10);
}

void Lcd_init (void)
{
	Lcd_CmdWrite(0x02); //initialize LCD  in 4bit mode
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 5a 00 	call	0xb4	; 0xb4 <Lcd_CmdWrite>
	Lcd_CmdWrite(0x28); // enable 5x7 mode for chars
 15e:	88 e2       	ldi	r24, 0x28	; 40
 160:	0e 94 5a 00 	call	0xb4	; 0xb4 <Lcd_CmdWrite>
	Lcd_CmdWrite(0x0E); //Display OFF, cursor ON
 164:	8e e0       	ldi	r24, 0x0E	; 14
 166:	0e 94 5a 00 	call	0xb4	; 0xb4 <Lcd_CmdWrite>
	Lcd_CmdWrite(0x01); // clear Display
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 5a 00 	call	0xb4	; 0xb4 <Lcd_CmdWrite>
	Lcd_CmdWrite(0x80); // Move the cursor to beginning or first line
 170:	80 e8       	ldi	r24, 0x80	; 128
 172:	0e 94 5a 00 	call	0xb4	; 0xb4 <Lcd_CmdWrite>
 176:	08 95       	ret

00000178 <Lcd_str>:
}

void Lcd_str(char *str)
{
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	ec 01       	movw	r28, r24
	while(*str)
 17e:	88 81       	ld	r24, Y
 180:	88 23       	and	r24, r24
 182:	31 f0       	breq	.+12     	; 0x190 <Lcd_str+0x18>
 184:	21 96       	adiw	r28, 0x01	; 1
	Lcd_DataWrite(*str++);
 186:	0e 94 83 00 	call	0x106	; 0x106 <Lcd_DataWrite>
	Lcd_CmdWrite(0x80); // Move the cursor to beginning or first line
}

void Lcd_str(char *str)
{
	while(*str)
 18a:	89 91       	ld	r24, Y+
 18c:	81 11       	cpse	r24, r1
 18e:	fb cf       	rjmp	.-10     	; 0x186 <Lcd_str+0xe>
	Lcd_DataWrite(*str++);
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <__vector_2>:

ISR (INT1_vect){
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	2f 93       	push	r18
 1a2:	3f 93       	push	r19
 1a4:	4f 93       	push	r20
 1a6:	5f 93       	push	r21
 1a8:	6f 93       	push	r22
 1aa:	7f 93       	push	r23
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	af 93       	push	r26
 1b2:	bf 93       	push	r27
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
	
	
	if(toggle){
 1b8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1bc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 1c0:	89 2b       	or	r24, r25
 1c2:	59 f0       	breq	.+22     	; 0x1da <__vector_2+0x44>
		Lcd_CmdWrite(0x0E);
 1c4:	8e e0       	ldi	r24, 0x0E	; 14
 1c6:	0e 94 5a 00 	call	0xb4	; 0xb4 <Lcd_CmdWrite>
		Lcd_CmdWrite(0x80);
 1ca:	80 e8       	ldi	r24, 0x80	; 128
 1cc:	0e 94 5a 00 	call	0xb4	; 0xb4 <Lcd_CmdWrite>
		Lcd_str("    Notice:");
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	0e 94 bc 00 	call	0x178	; 0x178 <Lcd_str>
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <__vector_2+0x4a>
				
		
	}else{
		Lcd_CmdWrite(0x08);
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	0e 94 5a 00 	call	0xb4	; 0xb4 <Lcd_CmdWrite>
	}
	
	
	toggle = 1 - toggle;
 1e0:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
 1e4:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__data_end+0x1>
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	82 1b       	sub	r24, r18
 1ee:	93 0b       	sbc	r25, r19
 1f0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 1f4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	
}
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	bf 91       	pop	r27
 1fe:	af 91       	pop	r26
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	7f 91       	pop	r23
 206:	6f 91       	pop	r22
 208:	5f 91       	pop	r21
 20a:	4f 91       	pop	r20
 20c:	3f 91       	pop	r19
 20e:	2f 91       	pop	r18
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <init_usart>:
	//PORTD |= 0B00000100;
}

// USART Commands
void init_usart(void){
	UBRR0H =(unsigned char)(UBRR_VALUE>>8); //Set UBBR upper byte
 21a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L =(unsigned char)(UBRR_VALUE); //Set UBBR lower byte
 21e:	87 e6       	ldi	r24, 0x67	; 103
 220:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B =(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); //enable transmitter/receiver
 224:	88 e9       	ldi	r24, 0x98	; 152
 226:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C =(3<<UCSZ00); //8-data bits
 22a:	86 e0       	ldi	r24, 0x06	; 6
 22c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 230:	08 95       	ret

00000232 <receiveUSART>:
}

unsigned char receiveUSART(void)
{
	while(!(UCSR0A & (1<<RXC0))); //wait till data received
 232:	e0 ec       	ldi	r30, 0xC0	; 192
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	88 23       	and	r24, r24
 23a:	ec f7       	brge	.-6      	; 0x236 <receiveUSART+0x4>
	return UDR0;				// put data to transmit buffer
 23c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	
}
 240:	08 95       	ret

00000242 <main>:


int main(void)
{
	/* Replace with your application code */
	initPorts();
 242:	0e 94 53 00 	call	0xa6	; 0xa6 <initPorts>
	Turn_Power_Indicator_LED_ON();
 246:	0e 94 58 00 	call	0xb0	; 0xb0 <Turn_Power_Indicator_LED_ON>
	Lcd_init();
 24a:	0e 94 ac 00 	call	0x158	; 0x158 <Lcd_init>
	init_usart();
 24e:	0e 94 0d 01 	call	0x21a	; 0x21a <init_usart>
	Lcd_DataWrite('O');
	Lcd_DataWrite('M');
	Lcd_DataWrite('E');
	Lcd_DataWrite('$');
	*/
	EICRA |= 0x03;
 252:	e9 e6       	ldi	r30, 0x69	; 105
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	83 60       	ori	r24, 0x03	; 3
 25a:	80 83       	st	Z, r24
	EIMSK |= 0x02;
 25c:	e9 9a       	sbi	0x1d, 1	; 29
	sei();
 25e:	78 94       	sei
	
	while (1)
	{
		unsigned char rxData;
		rxData = receiveUSART();
 260:	0e 94 19 01 	call	0x232	; 0x232 <receiveUSART>
 264:	fd cf       	rjmp	.-6      	; 0x260 <main+0x1e>

00000266 <receiveStr>:
	return UDR0;				// put data to transmit buffer
	
}

void receiveStr(char* buf, uint8_t n)
{
 266:	ef 92       	push	r14
 268:	ff 92       	push	r15
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	7c 01       	movw	r14, r24
 274:	d6 2f       	mov	r29, r22
 276:	8c 01       	movw	r16, r24
	uint8_t bufIdx = 0;
 278:	c0 e0       	ldi	r28, 0x00	; 0
	// while received character is not carriage return
	// and end of buffer has not been reached
	do
	{
		// receive character
		c = receiveUSART();
 27a:	0e 94 19 01 	call	0x232	; 0x232 <receiveUSART>

		// store character in buffer
		buf[bufIdx++] = c;
 27e:	cf 5f       	subi	r28, 0xFF	; 255
 280:	f8 01       	movw	r30, r16
 282:	81 93       	st	Z+, r24
 284:	8f 01       	movw	r16, r30
	}
	while((bufIdx < n) && (c != '\r'));
 286:	cd 17       	cp	r28, r29
 288:	10 f4       	brcc	.+4      	; 0x28e <receiveStr+0x28>
 28a:	8d 30       	cpi	r24, 0x0D	; 13
 28c:	b1 f7       	brne	.-20     	; 0x27a <receiveStr+0x14>

	// ensure buffer is null terminated
	buf[bufIdx] = 0;
 28e:	f7 01       	movw	r30, r14
 290:	ec 0f       	add	r30, r28
 292:	f1 1d       	adc	r31, r1
 294:	10 82       	st	Z, r1
}
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	ff 90       	pop	r15
 2a0:	ef 90       	pop	r14
 2a2:	08 95       	ret

000002a4 <__vector_18>:
	
	toggle = 1 - toggle;
	
}

ISR(USART_RX_vect){
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	3f 93       	push	r19
 2b2:	4f 93       	push	r20
 2b4:	5f 93       	push	r21
 2b6:	6f 93       	push	r22
 2b8:	7f 93       	push	r23
 2ba:	8f 93       	push	r24
 2bc:	9f 93       	push	r25
 2be:	af 93       	push	r26
 2c0:	bf 93       	push	r27
 2c2:	ef 93       	push	r30
 2c4:	ff 93       	push	r31
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
 2ce:	c4 56       	subi	r28, 0x64	; 100
 2d0:	d1 09       	sbc	r29, r1
 2d2:	de bf       	out	0x3e, r29	; 62
 2d4:	cd bf       	out	0x3d, r28	; 61
	//rxData = UDR0;
	
	Lcd_CmdWrite(0xC0);
 2d6:	80 ec       	ldi	r24, 0xC0	; 192
 2d8:	0e 94 5a 00 	call	0xb4	; 0xb4 <Lcd_CmdWrite>
	uint8_t bufSize = 100;
	char buf[bufSize];

	// get line from UART
	
	receiveStr(buf, bufSize);
 2dc:	64 e6       	ldi	r22, 0x64	; 100
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	ce 01       	movw	r24, r28
 2e2:	01 96       	adiw	r24, 0x01	; 1
 2e4:	0e 94 33 01 	call	0x266	; 0x266 <receiveStr>
	Lcd_str(buf);
 2e8:	ce 01       	movw	r24, r28
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	0e 94 bc 00 	call	0x178	; 0x178 <Lcd_str>
	if(buf){
		PORTC |= 0B00100000;
 2f0:	45 9a       	sbi	0x08, 5	; 8
 2f2:	2f ef       	ldi	r18, 0xFF	; 255
 2f4:	83 ed       	ldi	r24, 0xD3	; 211
 2f6:	90 e3       	ldi	r25, 0x30	; 48
 2f8:	21 50       	subi	r18, 0x01	; 1
 2fa:	80 40       	sbci	r24, 0x00	; 0
 2fc:	90 40       	sbci	r25, 0x00	; 0
 2fe:	e1 f7       	brne	.-8      	; 0x2f8 <__vector_18+0x54>
 300:	00 c0       	rjmp	.+0      	; 0x302 <__vector_18+0x5e>
 302:	00 00       	nop
		_delay_ms(1000);
		PORTC &= 0B11011111;
 304:	45 98       	cbi	0x08, 5	; 8
	}
	
	//PORTD |= 0B00000100;
}
 306:	cc 59       	subi	r28, 0x9C	; 156
 308:	df 4f       	sbci	r29, 0xFF	; 255
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	de bf       	out	0x3e, r29	; 62
 310:	0f be       	out	0x3f, r0	; 63
 312:	cd bf       	out	0x3d, r28	; 61
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	ff 91       	pop	r31
 31a:	ef 91       	pop	r30
 31c:	bf 91       	pop	r27
 31e:	af 91       	pop	r26
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	7f 91       	pop	r23
 326:	6f 91       	pop	r22
 328:	5f 91       	pop	r21
 32a:	4f 91       	pop	r20
 32c:	3f 91       	pop	r19
 32e:	2f 91       	pop	r18
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <_exit>:
 33a:	f8 94       	cli

0000033c <__stop_program>:
 33c:	ff cf       	rjmp	.-2      	; 0x33c <__stop_program>
